syntax = "proto3";


package auth.v1;


import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


option go_package = "github.com/ShopPoint/auth-service/proto/v1/user;v1";


// Представление пользователя из таблицы Auth_Users
message User {
  int32 auth_user_id = 1;                   // Уникальный ID учётной записи
  string username = 2;                      // Логин (уникальный)
  string email = 3;                         // Email
  string password_hash = 4;                 // Хэш пароля
  google.protobuf.Timestamp created_at = 5; // Дата создания
  google.protobuf.Timestamp updated_at = 6; // Дата последнего обновления
  bool is_active = 7;                       // Статус (true - активен)
}

// Запрос на регистрацию нового пользователя
message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3; // Передаётся в открытом виде, сервер производит хэширование
}


// Запрос на аутентификацию
message LoginRequest {
  string username = 1;
  string password = 2;
}

// Ответ на логин с выдачей access токенов
message LoginResponse {
  string access_token = 1;
}

// Запрос для обновления пары токенов (renew token).
// Клиент передаёт истёкший access_token.
message RenewTokenRequest {
  string access_token = 1;
}

// Ответ – новая пара токенов
message RenewTokenResponse {
  string access_token = 1;
}

// Запрос на получение данных пользователя по Username
message GetUserRequest {
  string username = 1;
}

// Запрос на обновление данных пользователя
message UpdateUserRequest {
  int32 auth_user_id = 1;
  string username = 2;
  string email = 3;
  // Если требуется обновление пароля – передаётся новый пароль
  string password = 4;
}


// Сервис для операций с пользователями и аутентификацией
service AuthService {
  rpc Register(RegisterRequest) returns (google.protobuf.Empty);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc RenewToken(RenewTokenRequest) returns (RenewTokenResponse);
  rpc GetUser(GetUserRequest) returns (User);
  rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);
  // Деактивация учётной записи (для блокировки)
  rpc DeactivateUser(GetUserRequest) returns (google.protobuf.Empty);
}
